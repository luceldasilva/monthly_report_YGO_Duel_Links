```{python}
from queries_db.constants import tables_db, kc_tables_db, comunidades
from queries_db import query as qu
from queries_db.transform_df_queries import converter_to_r
from reports.excel_export import export_report
import visualization
from visualization.comparison_two_months import indicator
from visualization.pie_diagram import percentage_deck_popularity
import pyprojroot
import numpy as np
import pandas as pd
import seaborn as sns
import locale
```

```{python}
#| tags: [parameters]

kc_cup_bool: bool = False
comunity: str = 'zephra'
idx_fact_table: int = 1
```

```{python}
save_bool: bool = False
fact_table: str = kc_tables_db[-idx_fact_table] if kc_cup_bool else tables_db[-idx_fact_table]
alias_fact_table: str = fact_table[-3:]
tournament_text: str = 'DLv. MAX' if kc_cup_bool else 'KOG'
```

```{python}
fact_query = f"""
SELECT p.nick, d.deck, s.skill, c.ndmax
FROM {fact_table} {alias_fact_table}
INNER JOIN decks d ON {alias_fact_table}.deck_id = d.deck_id
INNER JOIN players p ON {alias_fact_table}.player_id = p.player_id
INNER JOIN skills s ON {alias_fact_table}.skill_id = s.skill_id
INNER JOIN calendar_2025 c ON {alias_fact_table}.date_id = c.date_id
WHERE {alias_fact_table}.{comunity};
"""

fact_df = qu(fact_query)
fact_df
```

```{python}
"""
Para las fechas y poner el mes y a√±o correspondiente
"""
date_fact = fact_df.ndmax[0]

locale.setlocale(locale.LC_TIME, 'Spanish_Spain.1252')
#'es_ES.utf8'  En Linux/Mac
month_fact_table: str = date_fact.strftime('%B').capitalize()
year_fact_table: str = date_fact.strftime('%Y')
```

```{python}
decks_count_query = f"""
SELECT
    d.deck AS name, COUNT(*) AS total
FROM {fact_table} {alias_fact_table}
INNER JOIN decks d ON {alias_fact_table}.deck_id = d.deck_id
WHERE {alias_fact_table}.{comunity}
GROUP BY name
ORDER BY total DESC;
"""

decks_sum = qu(decks_count_query)
decks_sum
```

```{python}
date_query = f"""
SELECT 
    c.day_of_monthy, 
    COALESCE(COUNT({alias_fact_table}.date_id), 0) AS jugadores
FROM calendar_2025 c
LEFT JOIN {fact_table} {alias_fact_table} 
    ON {alias_fact_table}.date_id = c.date_id
    AND {alias_fact_table}.{comunity}
WHERE 
    c.monthy = {date_fact.month}
GROUP BY c.day_of_monthy
ORDER BY c.day_of_monthy;
"""

date_df = qu(date_query)
date_df
```

```{python}
idx_fact_previous: int = idx_fact_table + 1
previous_month_fact_table: str = kc_tables_db[-idx_fact_previous] if kc_cup_bool else tables_db[-idx_fact_previous]

alias_previous_month_fact_table: str = previous_month_fact_table[-3:]

fact_table_previous_query = f"""
SELECT p.nick, d.deck, s.skill, c.ndmax
FROM {previous_month_fact_table} {alias_previous_month_fact_table}
INNER JOIN decks d ON {alias_previous_month_fact_table}.deck_id = d.deck_id
INNER JOIN players p ON {alias_previous_month_fact_table}.player_id = p.player_id
INNER JOIN skills s ON {alias_previous_month_fact_table}.skill_id = s.skill_id
INNER JOIN calendar_2025 c ON {alias_previous_month_fact_table}.date_id = c.date_id
WHERE {alias_previous_month_fact_table}.{comunity};
"""

fact_table_previous_df = qu(fact_table_previous_query)
fact_table_previous_df
```

```{python}
summary_df = pd.DataFrame({
    'kc_cup': True if kc_cup_bool else False,
    'tour': tournament_text,
    'year': date_fact.year,
    'monthy': date_fact.month,
    'first_day': fact_df.ndmax.min().day,
    'last_day': fact_df.ndmax.max().day,
    'n_days': max(date_df.day_of_monthy)
}, index=[0])


converter_to_r(date_df, 'date_df')
converter_to_r(summary_df, 'summary_df')
```

```{python}
!Rscript ../visualization/monthly_calendar.R
```

```{python}
limit_top: int = 5
percentage_deck_popularity(save_bool, True, decks_sum, limit_top)
```

```{python}
visualization.top_five_decks(
    save_bool, False, decks_sum, limit_top,
    tournament_text, month_fact_table, year_fact_table
)
```

```{python}
visualization.wordcloud(save_bool, fact_df, decks_sum, limit_top)
```

```{python}
indicator(save_bool, fact_df, decks_sum, fact_table_previous_df, comunity)
```

```{python}
export_report(
    fact_df=fact_df,
    tournament_text=tournament_text,
    month_fact_table=month_fact_table,
    alias_fact_table=alias_fact_table,
    year_fact_table=year_fact_table,
    comunity=comunity
)
```

```{python}
print('Hola')
```