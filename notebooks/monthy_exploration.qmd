```{python}
from queries_db.constants import (
    comunity_dict, tables_db, kc_tables_db, comunidades
)
from queries_db import dataframe_queries as dfq
from queries_db.transform_df_queries import pivot_comunity, converter_to_r
import visualization
from visualization.venn_comunities import venn_graphs
from visualization.comparison_two_months import indicator
from visualization.pie_diagram import percentage_deck_popularity
import pyprojroot
import numpy as np
import pandas as pd
import seaborn as sns
import locale
```

```{python}
#| tags: [parameters]

kc_cup_bool: bool = False
idx_fact_table: int = 1
```

```{python}
save_bool: bool = True
fact_table: str = kc_tables_db[-idx_fact_table] if kc_cup_bool else tables_db[-idx_fact_table]
alias_fact_table: str = fact_table[-3:]
tournament_text: str = 'DLv. MAX' if kc_cup_bool else 'KOG'
```

```{python}
decks_sum = dfq.decks_df(fact_table, alias_fact_table)
decks_sum
```

```{python}
fact_df = dfq.df_query(fact_table, alias_fact_table)
```

```{python}
"""
Para las fechas y poner el mes y a√±o correspondiente
"""


locale.setlocale(locale.LC_TIME, 'Spanish_Spain.1252')
#'es_ES.utf8'  En Linux/Mac

date_fact_table = fact_df.ndmax[0]

month_fact_table: str = date_fact_table.strftime('%B').capitalize()
year_fact_table: str = date_fact_table.strftime('%Y')
```

```{python}
idx_fact_previous: int = idx_fact_table + 1
fact_table_previous: str = kc_tables_db[-idx_fact_previous] if kc_cup_bool else tables_db[-idx_fact_previous]

fact_previous_df = dfq.df_query(
    fact_table=fact_table_previous,
    alias_fact_table=fact_table_previous[-3:]
)
fact_previous_df
```

```{python}
pivot_comunidad = pivot_comunity(fact_df)
pivot_comunidad
```

```{python}
visualization.comunity_bars(save_bool, pivot_comunidad)
```

```{python}
venn_graphs(save_bool, fact_df, pivot_comunidad)
```

```{python}
date_df = dfq.date_df(fact_table, alias_fact_table, date_fact_table)
date_df
```


```{python}
summary_df = pd.DataFrame({
    'kc_cup': True if kc_cup_bool else False,
    'tour': tournament_text,
    'year': date_fact_table.year,
    'monthy': date_fact_table.month,
    'first_day': fact_df.ndmax.min().day,
    'last_day': fact_df.ndmax.max().day,
    'n_days': max(date_df.day_of_monthy)
}, index=[0])


converter_to_r(date_df, 'date_df')
converter_to_r(summary_df, 'summary_df')
```

```{python}
!Rscript ../visualization/monthly_calendar.R
```

```{python}
visualization.date_lineplot(
    save_bool, date_df, month_fact_table, year_fact_table, tournament_text
)
```

```{python}
limit_top: int = 5
percentage_deck_popularity(save_bool, True, decks_sum, limit_top)
```

```{python}
visualization.squarify_decks(
    save_bool, decks_sum, tournament_text, month_fact_table, year_fact_table
)
```

```{python}
visualization.top_five_decks(
    save_bool, False, decks_sum, limit_top,
    tournament_text, month_fact_table, year_fact_table
)
```

```{python}
visualization.wordcloud(save_bool, fact_df, decks_sum, limit_top)
```

```{python}
indicator(save_bool, fact_df, decks_sum, fact_previous_df)
```

```{python}
print('Hola')
```