---
title: "Reporte Copa KC"
format: dashboard
echo: false
lang: "es"
logo: logo-yugi.png
---

```{python}
#| output: false
from queries_db.constants import (
    comunity_dict, tables_db, kc_tables_db, comunidades
)
from queries_db import dataframe_queries as dfq
from queries_db.transform_df_queries import pivot_comunity
import visualization
from visualization.venn_comunities import venn_graphs, compare_with_kc_cup
from visualization.comparison_two_months import indicator
from visualization.pie_diagram import percentage_deck_popularity
import pyprojroot
import numpy as np
import pandas as pd
import seaborn as sns
import locale
```

```{python}
#| tags: [parameters]

kc_cup_bool: bool = True
idx_fact_table: int = 1
```

```{python}
save_photo: bool = False
fact_table: str = kc_tables_db[-idx_fact_table] if kc_cup_bool else tables_db[-idx_fact_table]
alias_fact_table: str = fact_table[-3:]
tournament_text: str = 'DLv. MAX' if kc_cup_bool else 'KOG'
```

```{python}
#| output: false

decks_sum = dfq.decks_df(fact_table, alias_fact_table)

fact_df = dfq.df_query(fact_table, alias_fact_table)

"""
Para las fechas y poner el mes y año correspondiente
"""


locale.setlocale(locale.LC_TIME, 'Spanish_Spain.1252')
#*'es_ES.utf8'  En Linux/Mac

date_fact_table = fact_df.ndmax[0]

month_fact_table: str = date_fact_table.strftime('%B').capitalize()
year_fact_table: str = date_fact_table.strftime('%Y')

title_report: str = f'{tournament_text} {month_fact_table} {year_fact_table}'

idx_fact_previous: int = idx_fact_table + 1
fact_table_previous: str = kc_tables_db[-idx_fact_previous] if kc_cup_bool else tables_db[-idx_fact_previous]

fact_previous_df = dfq.df_query(
    fact_table=fact_table_previous,
    alias_fact_table=fact_table_previous[-3:]
)
```

```{python}
df_count: int = len(fact_df)
count_fact_previous: int = len(fact_previous_df)

percentage_count = ((df_count - count_fact_previous) / count_fact_previous) * 100

color_relative: str = 'danger' if df_count < count_fact_previous else 'success'
icon_relative: str = 'arrow-down' if df_count < count_fact_previous else 'arrow-up'
```

# `{python} title_report` {orientation="columns"}

## Column {width=30%}

```{python}
#| content: valuebox
#| title: "Mazos Distintos"
dict(
  icon = "postage",
  color = "secondary",
  value = len(decks_sum)
)
```

```{python}
#| content: valuebox
#| title: "Registros"
dict(
  icon = "person",
  color = color_relative,
  value = df_count
)
```

```{python}
#| content: valuebox
#| title: "Comparado al anterior mes"
dict(
  icon = icon_relative,
  color = color_relative,
  value = f"{abs(percentage_count):.1f}%"
)
```

## Column {width=70%}

```{python}
#| output: false
limit_top: int = 5
```

```{python}
#| title: Mazos más usados
visualization.top_five_decks(
    save_photo, True, decks_sum, limit_top
)
```

# Datos de mazos

## Column

```{python}
#| title: Comparativa Top 5 vs Resto de mazos
percentage_deck_popularity(save_photo, False, decks_sum, limit_top)
```


```{python}
#| title: Otros mazos usados
visualization.wordcloud(save_photo, fact_df, decks_sum, limit_top)
```

# Comunidades {orientation="columns"}

```{python}
#| output: false
pivot_comunidad = pivot_comunity(fact_df)
pivot_comunidad
```

```{python}
#| output: false
visualization.comunity_bars(save_photo, pivot_comunidad)
```

```{python}
#| output: false
tour: str = 'kc_cup' if kc_cup_bool else 'kog'
url_base: str = f"https://monthly-report-yugioh-dl.vercel.app/reports/{tour}/{year_fact_table}_{month_fact_table.lower()}"
url_comunity: str = f"{url_base}_comunidad.png"
url_por_dia: str = f"{url_base}_por_dia.png"
```

## Column {width=60%}

![](`{python} url_comunity`)

## Column {width=40%}

```{python}
venn_graphs(save_photo, fact_df, pivot_comunidad)
```

# Llegadas por día {orientation="columns"}

![](`{python} url_por_dia`)

```{python}
#| output: false
fact_table: str = tables_db[-idx_fact_table]
alias_fact_table: str = fact_table[-3:]

kog_df = dfq.df_query(fact_table, alias_fact_table)

kc_fact_table: str = kc_tables_db[-idx_fact_table]
kc_alias_fact_table: str = kc_fact_table[-3:]
kc_df = dfq.df_query(kc_fact_table, kc_alias_fact_table)
```

```{python}
compare_with_kc_cup(
    save_photo=save_photo,
    kog_df=kog_df,
    kc_df=kc_df,
    month_fact_table=month_fact_table,
    year_fact_table=year_fact_table
)
```
